{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($setup.roomName) + \" \", 1 /* TEXT */), _createElementVNode(\"input\", {\n    value: $setup.message,\n    onInput: _cache[0] || (_cache[0] = (...args) => $setup.inputMessage && $setup.inputMessage(...args)),\n    type: \"text\"\n  }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.send && $setup.send(...args))\n  }, \"send\")], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["$setup","roomName","_createElementVNode","value","message","onInput","_cache","args","inputMessage","type","onClick","send"],"sources":["/Users/kgj/Library/Mobile Documents/com~apple~CloudDocs/공유/University/4-1/종프2/chatClient/chat-room/src/components/ChatRoom.vue"],"sourcesContent":["<template>\n  {{ roomName }}\n  <input v-bind:value=\"message\" @input=\"inputMessage\" type=\"text\">\n  <button @click=\"send\">send</button>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { io } from 'socket.io-client'\nimport { useRoute } from 'vue-router';\nexport default {\n  name : 'ChatRoom',\n  setup() {\n    let message = ref('');\n    const socket = io('http://localhost:3000');\n    const route = useRoute();\n    let roomName = route.query.roomName;\n    let sendData = ref({\n      roomName : roomName,\n      message : message.value\n    })\n    socket.on('connect', () => {\n      console.log('connected to server');\n    });\n\n    socket.emit('join', roomName);\n   \n\n    const sendMessage = (msg) => {\n      socket.emit('message', msg);\n    };\n\n    onMounted(() => {\n      console.log('mounted');\n    });\n\n    onUnmounted(()=>{\n      socket.emit('leave', roomName);\n    });\n\n    function inputMessage(e) {\n      message.value = e.target.value;\n    }\n\n    function send() {\n      socket.emit('send', sendData.value)\n      .then(()=>{\n        message.value = '';\n      });\n      \n    }\n\n\n    return {\n      message,\n      sendMessage, roomName, inputMessage, send\n    };\n  }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;;+FACKA,MAAA,CAAAC,QAAQ,IAAG,GACd,iBAAAC,mBAAA,CAAgE;IAAlDC,KAAK,EAAEH,MAAA,CAAAI,OAAO;IAAGC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,MAAA,CAAAQ,YAAA,IAAAR,MAAA,CAAAQ,YAAA,IAAAD,IAAA,CAAY;IAAEE,IAAI,EAAC;wDACzDP,mBAAA,CAAmC;IAA1BQ,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,MAAA,CAAAW,IAAA,IAAAX,MAAA,CAAAW,IAAA,IAAAJ,IAAA,CAAI;KAAE,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}